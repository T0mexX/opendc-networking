package org.opendc.simulator.network.components

import org.opendc.simulator.network.flow.NetFlow
import org.opendc.simulator.network.flow.FlowId
import org.opendc.simulator.network.units.DataRate
import org.opendc.simulator.network.units.ifNullZero
import org.opendc.simulator.network.utils.logger

/**
 * Node you can start a [NetFlow] from or direct a [NetFlow] to.
 */
internal interface EndPointNode: Node {
    companion object { private val log by logger() }

    /**
     * Starts a [NetFlow] from ***this*** node.
     * @param[newFlow]  the [NetFlow] to be started.
     */
    suspend fun startFlow(newFlow: NetFlow) {
        if (newFlow.transmitterId != this.id) {
            log.error("unable to start flow, this node is not the sender, aborting...")
            return
        }

        with (flowHandler) { generateFlow(newFlow) }
    }


    /**
     * Stops [NetFlow] with id [fId] if it is generated by ***this***. Else logs error.
     */
    suspend fun stopFlow(fId: FlowId) {
        with (flowHandler) { stopGeneratedFlow(fId) }
    }

    /**
     * Stores a reference to an incoming [NetFlow] so that its end-to-end data rate can be updated.
     * @param[f]  the [NetFlow] to store the reference of.
     */
    fun addReceivingEtoEFlow(f: NetFlow) {
        flowHandler.consumedFlows[f.id] = f
    }

    /**
     * Removes the reference of an incoming [NetFlow]. To be called when the end-to-end
     * flow is no longer running through the network.
     * @param[flowId]   id of the end-to-end flow whose reference is to be removed.
     */
    fun rmReceivingEtoEFlow(flowId: FlowId) {
        flowHandler.consumedFlows.remove(flowId)
            ?: log.error("unable to remove end-to-end receiving flow, flow not present")
    }


    override fun totIncomingDataRateOf(fId: FlowId): DataRate =
        with(flowHandler) {
            if (fId in generatedFlows) DataRate.ZERO
            else consumedFlows[fId]?.throughput
                ?: let { outgoingFlows[fId]?.demand }
                    .ifNullZero()
        }
}
