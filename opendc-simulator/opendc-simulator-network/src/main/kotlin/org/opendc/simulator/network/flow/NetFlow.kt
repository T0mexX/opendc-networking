package org.opendc.simulator.network.flow

import org.opendc.simulator.network.components.EndPointNode
import org.opendc.simulator.network.components.NodeId
import org.opendc.simulator.network.utils.Kb
import org.opendc.simulator.network.utils.Kbps
import org.opendc.simulator.network.utils.OnChangeHandler
import org.opendc.simulator.network.utils.ms
import java.time.Duration
import kotlin.properties.Delegates

/**
 * Represents an end-to-end flow, meaning the flow from one [EndPointNode] to another.
 * This end-to-end flow can be split into multiple sub-flows along the path,
 * but ultimately each sub-flow arrives at destination.
 * @param[transmitterId]             id of the [EndPointNode] this end-to-end flow is generated from.
 * @param[destinationId]               id of the [EndPointNode] this end-to-end flow is directed to.
 * @param[id]               id of this end-to-end flow.
 * @param[desiredDataRate]      data rate generated by the sender.
 */
public class NetFlow(
    public val transmitterId: NodeId,
    public val destinationId: NodeId,
    public val id: FlowId,
    public var desiredDataRate: Kbps = .0,
) {

    private val throughputOnChangeHandlers = mutableListOf<OnChangeHandler<NetFlow, Kbps>>()

    private var totDataTransmitted: Kb = .0

    /**
     * The end-to-end data rate of the flow.
     */
    public var throughput: Kbps by Delegates.observable(.0) { _, oldValue, newValue ->
        throughputOnChangeHandlers.forEach { it.handleChange(this, oldValue, newValue) }
    }
    internal set

    public fun withDataRateOnChangeHandler(f: (NetFlow, Kbps, Kbps) -> Unit): NetFlow {
        throughputOnChangeHandlers.add(f)

        return this
    }

//    /** TODO
//     * Advances time by [timeSpan], adjusting [remDataToTransmit] accordingly.
//     */
    internal fun advanceBy(timeSpan: Duration) {
        advanceBy(timeSpan.toMillis())
    }

    internal fun advanceBy(ms: ms) {
        fun ms.toSeconds(): Double = this.toDouble() / 1000

        totDataTransmitted += throughput * ms.toSeconds()
    }
}



